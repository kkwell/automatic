<?xml version="1.0"?>
<unit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:rs="http://www.ribbonsoft.com">
  <class_decl name="RMouseEvent" />
  <class_decl name="RGraphicsView" />
  <class name="RSnapAuto"
  xsi:noNamespaceSchemaLocation="../class.xsd" isCopyable="false"
  hasShell="false" sharedPointerSupport="false" isQObject="false"
  hasStreamOperator="false" isAbstract="false" isScriptable="true">
    <baseClass name="RSnap" specifier="public" />
    <enum name="Mode">
      <value name="None" />
      <value name="Intersections" />
      <value name="EndPoints" />
      <value name="MiddlePoints" />
      <value name="CenterPoints" />
      <value name="Perpendicular" />
      <value name="Tangential" />
      <value name="ReferencePoints" />
      <value name="GridPoints" />
      <value name="PointsOnEntity" />
      <value name="FreePositioning" />
    </enum>
    <constructor>
      <variant />
    </constructor>
    <method name="snap" cppName="snap" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="position" isConst="true" />
        <arg type="RGraphicsView &amp;" typeName="RGraphicsView"
        name="view" isConst="false" />
        <arg type="double" typeName="double" name="range"
        hasDefault="true" default="RNANDOUBLE" isConst="false" />
      </variant>
    </method>
    <method name="init" cppName="init" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="force"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getModes" cppName="getModes" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RSnapAuto::Modes"
      isPureVirtual="false" />
    </method>
    <method name="setModes" cppName="setModes" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RSnapAuto::Modes" typeName="RSnapAuto::Modes"
        name="m" isConst="false" />
      </variant>
    </method>
    <method name="setMode" cppName="setMode" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RSnapAuto::Mode" typeName="RSnapAuto::Mode"
        name="mode" isConst="false" />
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getMode" cppName="getMode" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RSnapAuto::Mode" typeName="RSnapAuto::Mode"
        name="mode" isConst="false" />
      </variant>
    </method>
    <method name="setIntersections" cppName="setIntersections"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getIntersections" cppName="getIntersections"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setEndPoints" cppName="setEndPoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getEndPoints" cppName="getEndPoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setMiddlePoints" cppName="setMiddlePoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getMiddlePoints" cppName="getMiddlePoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setCenterPoints" cppName="setCenterPoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getCenterPoints" cppName="getCenterPoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setPerpendicular" cppName="setPerpendicular"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getPerpendicular" cppName="getPerpendicular"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setTangential" cppName="setTangential"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getTangential" cppName="getTangential"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setReferencePoints" cppName="setReferencePoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getReferencePoints" cppName="getReferencePoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setGridPoints" cppName="setGridPoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getGridPoints" cppName="getGridPoints"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setPointsOnEntity" cppName="setPointsOnEntity"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getPointsOnEntity" cppName="getPointsOnEntity"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setFreePositioning" cppName="setFreePositioning"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getFreePositioning" cppName="getFreePositioning"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="reset" cppName="reset" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
  </class>
</unit>
