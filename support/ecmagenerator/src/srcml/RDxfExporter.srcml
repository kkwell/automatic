<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./io/dxf" filename="RDxfExporter.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDXFEXPORTER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDXFEXPORTER_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxf_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxflib/src/dl_creationinterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxflib/src/dl_dxf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RArc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDxfServices.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RFileExporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RRay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RXLine.h"</cpp:file></cpp:include>

<class_decl>class <name>RArcEntity</name>;</class_decl>
<class_decl>class <name>RAttributeEntity</name>;</class_decl>
<class_decl>class <name>RCircleEntity</name>;</class_decl>
<class_decl>class <name>RDimensionEntity</name>;</class_decl>
<class_decl>class <name>REllipseEntity</name>;</class_decl>
<class_decl>class <name>RHatchEntity</name>;</class_decl>
<class_decl>class <name>RImageEntity</name>;</class_decl>
<class_decl>class <name>RLeaderEntity</name>;</class_decl>
<class_decl>class <name>RLineEntity</name>;</class_decl>
<class_decl>class <name>RMessageHandler</name>;</class_decl>
<class_decl>class <name>RPointEntity</name>;</class_decl>
<class_decl>class <name>RPolylineEntity</name>;</class_decl>
<class_decl>class <name>RProgressHandler</name>;</class_decl>
<class_decl>class <name>RRayEntity</name>;</class_decl>
<class_decl>class <name>RSolidEntity</name>;</class_decl>
<class_decl>class <name>RSplineEntity</name>;</class_decl>
<class_decl>class <name>RTraceEntity</name>;</class_decl>
<class_decl>class <name>RTextEntity</name>;</class_decl>
<class_decl>class <name>RTextBasedData</name>;</class_decl>
<class_decl>class <name>RTextBasedEntity</name>;</class_decl>
<class_decl>class <name>RXLineEntity</name>;</class_decl>


<comment type="block">/**
 * \brief Exporter for the DXF format, based on dxflib.
 *
 * \ingroup dxf
 */</comment>
<class>class <macro><name>QCADDXF_EXPORT</name></macro> <name>RDxfExporter</name><super>: <specifier>public</specifier> <name>RFileExporter</name></super> <block>{<private type="default">
</private><public>public:
    <constructor_decl><name>RDxfExporter</name><parameter_list>(<param><decl><type><name>RDocument</name>&amp;</type> <name>document</name></decl></param>,
        <param><decl><type><name>RMessageHandler</name>*</type> <name>messageHandler</name> =<init> <expr><name>NULL</name></expr></init></decl></param>,
        <param><decl><type><name>RProgressHandler</name>*</type> <name>progressHandler</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>
    <destructor><specifier>virtual</specifier> <name>~RDxfExporter</name><parameter_list>()</parameter_list> <block>{}</block></destructor>

    <function_decl><type><name>virtual</name> <name>QString</name></type> <name>getCorrectedFileName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>fileName</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>nameFilter</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>exportFile</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>fileName</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>nameFilter</name></decl></param>, <param><decl><type><name>bool</name></type> <name>setFileName</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>writeVariables</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeLinetype</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>lt</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeLayer</name><parameter_list>(<param><decl><type><name>const</name> <name>RLayer</name>&amp;</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeBlock</name><parameter_list>(<param><decl><type><name>const</name> <name>RBlock</name>&amp;</type> <name>b</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>writeEntity</name><parameter_list>(<param><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>id</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeEntity</name><parameter_list>(<param><decl><type><name>const</name> <name>REntity</name>&amp;</type> <name>e</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writePoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RPointEntity</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeLine</name><parameter_list>(<param><decl><type><name>const</name> <name>RLineEntity</name>&amp;</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeXLine</name><parameter_list>(<param><decl><type><name>const</name> <name>RXLineEntity</name>&amp;</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeRay</name><parameter_list>(<param><decl><type><name>const</name> <name>RRayEntity</name>&amp;</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeCircle</name><parameter_list>(<param><decl><type><name>const</name> <name>RCircleEntity</name>&amp;</type> <name>c</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeArc</name><parameter_list>(<param><decl><type><name>const</name> <name>RArcEntity</name>&amp;</type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeEllipse</name><parameter_list>(<param><decl><type><name>const</name> <name>REllipseEntity</name>&amp;</type> <name>el</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writePolyline</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolylineEntity</name>&amp;</type> <name>pl</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writePolyline</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>pl</name></decl></param>, <param><decl><type><name>bool</name></type> <name>plineGen</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeSpline</name><parameter_list>(<param><decl><type><name>const</name> <name>RSplineEntity</name>&amp;</type> <name>sp</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>DL_TextData</name></type> <name>getTextData</name><parameter_list>(<param><decl><type><name>const</name> <name>RTextBasedData</name>&amp;</type> <name>t</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>styleName</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getStyleName</name><parameter_list>(<param><decl><type><name>const</name> <name>RTextBasedEntity</name>&amp;</type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeText</name><parameter_list>(<param><decl><type><name>const</name> <name>RTextEntity</name>&amp;</type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeAttribute</name><parameter_list>(<param><decl><type><name>const</name> <name>RAttributeEntity</name>&amp;</type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeSimpleText</name><parameter_list>(<param><decl><type><name>const</name> <name>RTextEntity</name>&amp;</type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeMText</name><parameter_list>(<param><decl><type><name>const</name> <name>RTextEntity</name>&amp;</type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeDimension</name><parameter_list>(<param><decl><type><name>const</name> <name>RDimensionEntity</name>&amp;</type> <name>d</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeLeader</name><parameter_list>(<param><decl><type><name>const</name> <name>RLeaderEntity</name>&amp;</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeHatch</name><parameter_list>(<param><decl><type><name>const</name> <name>RHatchEntity</name>&amp;</type> <name>h</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeImage</name><parameter_list>(<param><decl><type><name>const</name> <name>RImageEntity</name>&amp;</type> <name>img</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeSolid</name><parameter_list>(<param><decl><type><name>const</name> <name>RSolidEntity</name>&amp;</type> <name>sol</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>writeTrace</name><parameter_list>(<param><decl><type><name>const</name> <name>RTraceEntity</name>&amp;</type> <name>t</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>writeBlockReference</name><parameter_list>(<param><decl><type><name>const</name> <name>RBlockReferenceEntity</name>&amp;</type> <name>br</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>writeImageDef</name><parameter_list>(<param><decl><type><name>const</name> <name>RImageEntity</name>&amp;</type> <name>img</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name>void</name></type> <name>exportPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RPoint</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>point</argument>)</argument_list></macro>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>exportArcSegment</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc</name></decl></param>, <param><decl><type><name>bool</name></type> <name>allowForZeroLength</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>arc</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>allowForZeroLength</argument>)</argument_list></macro>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>exportLineSegment</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line</name></decl></param>, <param><decl><type><name>double</name></type> <name>angle</name> =<init> <expr><name>RNANDOUBLE</name></expr></init></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>line</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>angle</argument>)</argument_list></macro>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>exportXLine</name><parameter_list>(<param><decl><type><name>const</name> <name>RXLine</name>&amp;</type> <name>xLine</name></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>xLine</argument>)</argument_list></macro>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>exportRay</name><parameter_list>(<param><decl><type><name>const</name> <name>RRay</name>&amp;</type> <name>ray</name></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>ray</argument>)</argument_list></macro>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>exportTriangle</name><parameter_list>(<param><decl><type><name>const</name> <name>RTriangle</name>&amp;</type> <name>triangle</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//Q_UNUSED(triangle)</comment>
    }</block></function>

    <function_decl><type><name>static</name> <name>QByteArray</name></type> <name>escapeUnicode</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>str</name></decl></param>)</parameter_list>;</function_decl>

</public><private>private:
    <function_decl><type><name>DL_Attributes</name></type> <name>getEntityAttributes</name><parameter_list>(<param><decl><type><name>const</name> <name>REntity</name>&amp;</type> <name>entity</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>DL_StyleData</name></type> <name>getStyle</name><parameter_list>(<param><decl><type><name>const</name> <name>RTextBasedEntity</name>&amp;</type> <name>entity</name></decl></param>)</parameter_list>;</function_decl>

</private><private>private:
    <decl_stmt><decl><type><name>DL_Dxf</name></type> <name>dxf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DL_WriterA</name>*</type> <name>dw</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DL_Attributes</name></type> <name>attributes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>textStyleCounter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></type> <name>textStyles</name></decl>;</decl_stmt>
    <comment type="line">// maps image entity IDs to handles:</comment>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>int</name></argument>&gt;</argument_list></name></type> <name>imageHandles</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>minimalistic</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RDxfExporter*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
