<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./gui" filename="RColumnLayout.h"><comment type="block">/**
 * Copyright (c) 2022 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RCOLUMNLAYOUT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RCOLUMNLAYOUT_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLayout&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QToolBar&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPair&gt;</cpp:file></cpp:include>

<class_decl>class <name>QToolButton</name>;</class_decl>
<class_decl>class <name>RGuiAction</name>;</class_decl>

<comment type="block">/**
 * \scriptable
 * \ingroup gui
 */</comment>
<class>class <macro><name>QCADGUI_EXPORT</name></macro> <name>RColumnLayout</name><super>: <specifier>public</specifier> <name>QLayout</name></super> <block>{<private type="default">

    <macro><name>Q_OBJECT</name></macro>

</private><public>public:
    <constructor_decl><name>RColumnLayout</name><parameter_list>(<param><decl><type><name>QWidget</name>*</type> <name>parent</name></decl></param>, <param><decl><type><name>QToolBar</name>*</type> <name>toolBar</name></decl></param>, <param><decl><type><name>int</name></type> <name>buttonSize</name></decl></param>)</parameter_list>;</constructor_decl>

<comment type="line">//    void removeAction(QAction* a);</comment>

    <comment type="line">// from QLayout, called by addWidget or addLayout:</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addItem</name><parameter_list>(<param><decl><type><name>QLayoutItem</name>*</type> <name>item</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>int</name></type>	<name>count</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QLayoutItem</name>*</type> <name>itemAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QLayoutItem</name>*</type> <name>takeAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>unsigned</name> <name>long</name> <name>int</name></type> <name>getAccumulatedSortOrder</name><parameter_list>(<param><decl><type><name>QObject</name>*</type> <name>item</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>objectName</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>unsigned</name> <name>int</name></type> <name>getSortOrder</name><parameter_list>(<param><decl><type><name>QObject</name>*</type> <name>item</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>objectName</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>unsigned</name> <name>int</name></type> <name>getGroupSortOrder</name><parameter_list>(<param><decl><type><name>QObject</name>*</type> <name>item</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>objectName</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>QSize</name></type> <name>minimumSize</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QSize</name></type> <name>sizeHint</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setGeometry</name><parameter_list>(<param><decl><type><name>const</name> <name>QRect</name>&amp;</type> <name>rect</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setGeometry</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function><type><name>static</name> <name>bool</name></type> <name>itemLessThan</name><parameter_list>(<param><decl><type><name>const</name> <name>QPair<argument_list>&lt;<argument><name>QLayoutItem</name>*</argument>, <argument><name>unsigned</name> <name>long</name> <name>int</name></argument>&gt;</argument_list></name>&amp;</type> <name>v1</name></decl></param>, <param><decl><type><name>const</name> <name>QPair<argument_list>&lt;<argument><name>QLayoutItem</name>*</argument>, <argument><name>unsigned</name> <name>long</name> <name>int</name></argument>&gt;</argument_list></name>&amp;</type> <name>v2</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>v1</name>.<name>second</name> &lt; <name>v2</name>.<name>second</name></expr>;</return>
    }</block></function>

</public><private>private:
    <comment type="line">// map existing layout items to accumulated sort order:</comment>
    <decl_stmt><decl><type><name>mutable</name> <name>QList<argument_list>&lt;<argument><name>QPair<argument_list>&lt;<argument><name>QLayoutItem</name>*</argument>, <argument><name>unsigned</name> <name>long</name> <name>int</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>itemList</name></decl>;</decl_stmt>

    <comment type="line">// tool bar that hosts the layout:</comment>
    <decl_stmt><decl><type><name>QToolBar</name>*</type> <name>toolBar</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mutable</name> <name>QSize</name></type> <name>sHint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>int</name></type> <name>sHintColumns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>int</name></type> <name>sHintWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>int</name></type> <name>sHintHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>sHintVerticalWhenFloating</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>int</name></type> <name>sHintHorizontal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>int</name></type> <name>sHintIconSize</name></decl>;</decl_stmt>
</private>}</block>;</class>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
