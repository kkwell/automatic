<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./entity" filename="RDimStyleProxyBasic.h"><comment type="block">/**
 * Copyright (c) 2011-2021 by Andrew Mustun. All rights reserved.
 *
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDIMSTYLEPROXYBASIC_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDIMSTYLEPROXYBASIC_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entity_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QList&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSharedPointer&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDimStyleProxy.h"</cpp:file></cpp:include>

<class_decl>class <name>RDimRotatedEntity</name>;</class_decl>
<class_decl>class <name>RDocument</name>;</class_decl>
<class_decl>class <name>RShape</name>;</class_decl>
<class_decl>class <name>RTextData</name>;</class_decl>
<class_decl>class <name>RVector</name>;</class_decl>
<class_decl>class <name>RDimensionData</name>;</class_decl>
<class_decl>class <name>RArc</name>;</class_decl>
<class_decl>class <name>RLine</name>;</class_decl>

<comment type="block">/**
 * Proxy for advanced dimension style functionality and rendering. May be implemented
 * by a plugin.
 *
 * \ingroup entity
 */</comment>
<class>class <macro><name>QCADENTITY_EXPORT</name></macro> <name>RDimStyleProxyBasic</name> <super>: <specifier>public</specifier> <name>RDimStyleProxy</name></super> <block>{<private type="default">
</private><public>public:
    <constructor><name>RDimStyleProxyBasic</name><parameter_list>()</parameter_list> <member_list>:
        <call><name>document</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>, <call><name>dimensionData</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>, <call><name>dimStyle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>, <call><name>preview</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call>, <call><name>forceSelected</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call>, <call><name>outsideArrow1</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call>, <call><name>outsideArrow2</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>

    <destructor><specifier>virtual</specifier> <name>~RDimStyleProxyBasic</name><parameter_list>()</parameter_list> <block>{}</block></destructor>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>render</name><parameter_list>(<param><decl><type><name>const</name> <name>RDimStyle</name>&amp;</type> <name>dimStyle</name></decl></param>, <param><decl><type><name>const</name> <name>REntityData</name>&amp;</type> <name>entity</name></decl></param>, <param><decl><type><name>bool</name></type> <name>preview</name></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name></decl></param>)</parameter_list>;</function_decl>

</public><protected>protected:
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>renderPrivate</name><parameter_list>(<param><decl><type><name>const</name> <name>RDimStyle</name>&amp;</type> <name>dimStyle</name></decl></param>, <param><decl><type><name>const</name> <name>REntityData</name>&amp;</type> <name>entity</name></decl></param>, <param><decl><type><name>bool</name></type> <name>preview</name></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>renderDimRotated</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>renderDimAligned</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>renderDimOrdinate</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>renderDimRadial</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>renderDimDiametric</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>renderDimAngular</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name>void</name></type> <name>breakUpDimArc</name><parameter_list>(<param><decl><type><name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name>&amp;</type> <name>shapes</name></decl></param>, <param><decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>RArc</name></argument>&gt;</argument_list></name></type> <name>dimArc</name></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>shapes</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>dimArc</argument>)</argument_list></macro>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>updateTextPosition</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>text</name></decl></param>, <param><decl><type><name>double</name></type> <name>textWidth</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>dimLine1</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>dimLine2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>corrected</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>updateOutsideArrow</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p1</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p2</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getDimensionLineShapes</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p1</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>arrow1</name></decl></param>, <param><decl><type><name>bool</name></type> <name>arrow2</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>hasSpaceForArrows</name><parameter_list>(<param><decl><type><name>double</name></type> <name>dimLineLength</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getArrow</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name></decl></param>, <param><decl><type><name>double</name></type> <name>direction</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>adjustExtensionLineFixLength</name><parameter_list>(<param><decl><type><name>RLine</name>&amp;</type> <name>extLine1</name></decl></param>, <param><decl><type><name>RLine</name>&amp;</type> <name>extLine2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>addDimExe</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</protected><protected>protected:
    <decl_stmt><decl><type><name>const</name> <name>RDocument</name>*</type> <name>document</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>const</name> <name>RDimensionData</name>*</type> <name>dimensionData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>const</name> <name>RDimStyle</name>*</type> <name>dimStyle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>preview</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>forceSelected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>outsideArrow1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>outsideArrow2</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
