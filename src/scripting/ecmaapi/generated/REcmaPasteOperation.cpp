// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaPasteOperation.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaClipboardOperation.h"
                 void REcmaPasteOperation::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RPasteOperation*) 0)));
        protoCreated = true;
    }

    
        // primary base class RClipboardOperation:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<RClipboardOperation*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class RClipboardOperation
        REcmaHelper::registerFunction(&engine, proto, getRClipboardOperation, "getRClipboardOperation");
        
        // conversion for base class ROperation
        REcmaHelper::registerFunction(&engine, proto, getROperation, "getROperation");
        
        // conversion for base class RRequireHeap
        REcmaHelper::registerFunction(&engine, proto, getRRequireHeap, "getRRequireHeap");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, setOffsets, "setOffsets");
            
            REcmaHelper::registerFunction(&engine, proto, setRotations, "setRotations");
            
            REcmaHelper::registerFunction(&engine, proto, setCenters, "setCenters");
            
            REcmaHelper::registerFunction(&engine, proto, setOffset, "setOffset");
            
            REcmaHelper::registerFunction(&engine, proto, getOffset, "getOffset");
            
            REcmaHelper::registerFunction(&engine, proto, setScale, "setScale");
            
            REcmaHelper::registerFunction(&engine, proto, getScale, "getScale");
            
            REcmaHelper::registerFunction(&engine, proto, setRotation, "setRotation");
            
            REcmaHelper::registerFunction(&engine, proto, getRotation, "getRotation");
            
            REcmaHelper::registerFunction(&engine, proto, setCenter, "setCenter");
            
            REcmaHelper::registerFunction(&engine, proto, getCenter, "getCenter");
            
            REcmaHelper::registerFunction(&engine, proto, setFlipHorizontal, "setFlipHorizontal");
            
            REcmaHelper::registerFunction(&engine, proto, getFlipHorizontal, "getFlipHorizontal");
            
            REcmaHelper::registerFunction(&engine, proto, setFlipVertical, "setFlipVertical");
            
            REcmaHelper::registerFunction(&engine, proto, getFlipVertical, "getFlipVertical");
            
            REcmaHelper::registerFunction(&engine, proto, setToCurrentLayer, "setToCurrentLayer");
            
            REcmaHelper::registerFunction(&engine, proto, getToCurrentLayer, "getToCurrentLayer");
            
            REcmaHelper::registerFunction(&engine, proto, setOverwriteLayers, "setOverwriteLayers");
            
            REcmaHelper::registerFunction(&engine, proto, getOverwriteLayers, "getOverwriteLayers");
            
            REcmaHelper::registerFunction(&engine, proto, setOverwriteBlocks, "setOverwriteBlocks");
            
            REcmaHelper::registerFunction(&engine, proto, getOverwriteBlocks, "getOverwriteBlocks");
            
            REcmaHelper::registerFunction(&engine, proto, setBlockName, "setBlockName");
            
            REcmaHelper::registerFunction(&engine, proto, getBlockName, "getBlockName");
            
            REcmaHelper::registerFunction(&engine, proto, setLayerName, "setLayerName");
            
            REcmaHelper::registerFunction(&engine, proto, getLayerName, "getLayerName");
            
            REcmaHelper::registerFunction(&engine, proto, setAttribute, "setAttribute");
            
            REcmaHelper::registerFunction(&engine, proto, setProperty, "setProperty");
            
            REcmaHelper::registerFunction(&engine, proto, setBlockProperty, "setBlockProperty");
            
            REcmaHelper::registerFunction(&engine, proto, apply, "apply");
            
            REcmaHelper::registerFunction(&engine, proto, getBoundary, "getBoundary");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RPasteOperation*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RPasteOperation",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaPasteOperation::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RPasteOperation(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RDocument */
            
    ){
    // prepare arguments:
    
                    // argument is reference
                    RDocument*
                    ap0 =
                    qscriptvalue_cast<
                    RDocument*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPasteOperation: Argument 0 is not of type RDocument*.",
                               context);                    
                    }
                    RDocument& a0 = *ap0;
                
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RPasteOperation
                    * cppResult =
                    new
                    RPasteOperation
                    (
                    a0
                    );
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RPasteOperation(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaPasteOperation::getRClipboardOperation(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RClipboardOperation* cppResult =
                    qscriptvalue_cast<RPasteOperation*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaPasteOperation::getROperation(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                ROperation* cppResult =
                    qscriptvalue_cast<RPasteOperation*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaPasteOperation::getRRequireHeap(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RRequireHeap* cppResult =
                    qscriptvalue_cast<RPasteOperation*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaPasteOperation::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RPasteOperation"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaPasteOperation::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("RClipboardOperation");
    
        list.append("ROperation");
    
        list.append("RRequireHeap");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaPasteOperation::setOffsets
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setOffsets", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setOffsets";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setOffsets", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RVector > */
    
    ){
    // prepare arguments:
    
                    // argument isArray or QVariantMap
                    QList < RVector >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOffsets(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setOffsets().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setOffsets", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setRotations
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setRotations", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setRotations";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setRotations", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < double > */
    
    ){
    // prepare arguments:
    
                    // argument isArray or QVariantMap
                    QList < double >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRotations(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setRotations().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setRotations", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setCenters
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setCenters", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setCenters";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setCenters", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RVector > */
    
    ){
    // prepare arguments:
    
                    // argument isArray or QVariantMap
                    QList < RVector >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCenters(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setCenters().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setCenters", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setOffset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setOffset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setOffset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setOffset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPasteOperation: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOffset(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setOffset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setOffset", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getOffset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getOffset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getOffset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getOffset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getOffset();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getOffset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getOffset", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setScale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setScale(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getScale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getScale();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setRotation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setRotation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setRotation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setRotation", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRotation(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setRotation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setRotation", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getRotation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getRotation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getRotation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getRotation", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getRotation();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getRotation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getRotation", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setCenter
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setCenter", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setCenter";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setCenter", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPasteOperation: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCenter(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setCenter().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setCenter", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getCenter
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getCenter", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getCenter";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getCenter", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getCenter();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getCenter().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getCenter", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setFlipHorizontal
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setFlipHorizontal", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setFlipHorizontal";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setFlipHorizontal", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFlipHorizontal(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setFlipHorizontal().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setFlipHorizontal", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getFlipHorizontal
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getFlipHorizontal", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getFlipHorizontal";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getFlipHorizontal", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getFlipHorizontal();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getFlipHorizontal().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getFlipHorizontal", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setFlipVertical
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setFlipVertical", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setFlipVertical";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setFlipVertical", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFlipVertical(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setFlipVertical().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setFlipVertical", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getFlipVertical
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getFlipVertical", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getFlipVertical";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getFlipVertical", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getFlipVertical();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getFlipVertical().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getFlipVertical", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setToCurrentLayer
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setToCurrentLayer", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setToCurrentLayer";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setToCurrentLayer", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setToCurrentLayer(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setToCurrentLayer().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setToCurrentLayer", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getToCurrentLayer
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getToCurrentLayer", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getToCurrentLayer";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getToCurrentLayer", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getToCurrentLayer();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getToCurrentLayer().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getToCurrentLayer", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setOverwriteLayers
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setOverwriteLayers", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setOverwriteLayers";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setOverwriteLayers", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOverwriteLayers(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setOverwriteLayers().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setOverwriteLayers", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getOverwriteLayers
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getOverwriteLayers", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getOverwriteLayers";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getOverwriteLayers", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getOverwriteLayers();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getOverwriteLayers().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getOverwriteLayers", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setOverwriteBlocks
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setOverwriteBlocks", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setOverwriteBlocks";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setOverwriteBlocks", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOverwriteBlocks(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setOverwriteBlocks().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setOverwriteBlocks", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getOverwriteBlocks
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getOverwriteBlocks", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getOverwriteBlocks";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getOverwriteBlocks", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getOverwriteBlocks();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getOverwriteBlocks().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getOverwriteBlocks", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setBlockName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setBlockName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setBlockName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setBlockName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBlockName(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setBlockName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setBlockName", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getBlockName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getBlockName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getBlockName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getBlockName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getBlockName();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getBlockName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getBlockName", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setLayerName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setLayerName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setLayerName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setLayerName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLayerName(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setLayerName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setLayerName", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getLayerName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getLayerName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getLayerName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getLayerName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getLayerName();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getLayerName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getLayerName", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setAttribute
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setAttribute", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setAttribute";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setAttribute", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAttribute(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setAttribute().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setAttribute", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setProperty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setProperty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setProperty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setProperty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setProperty(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setProperty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setProperty", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::setBlockProperty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::setBlockProperty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::setBlockProperty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("setBlockProperty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBlockProperty(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.setBlockProperty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::setBlockProperty", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::apply
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::apply", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::apply";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("apply", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RDocument*
                    ap0 =
                    qscriptvalue_cast<
                    RDocument*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPasteOperation: Argument 0 is not of type RDocument*.",
                               context);                    
                    }
                    RDocument& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'RTransaction'
    RTransaction cppResult =
        
               self->apply(a0);
        // return type: RTransaction
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RDocument*
                    ap0 =
                    qscriptvalue_cast<
                    RDocument*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPasteOperation: Argument 0 is not of type RDocument*.",
                               context);                    
                    }
                    RDocument& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'RTransaction'
    RTransaction cppResult =
        
               self->apply(a0
        ,
    a1);
        // return type: RTransaction
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.apply().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::apply", context, engine);
            return result;
        }
         QScriptValue
        REcmaPasteOperation::getBoundary
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPasteOperation::getBoundary", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPasteOperation::getBoundary";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPasteOperation* self = 
                        getSelf("getBoundary", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RPolyline'
    RPolyline cppResult =
        
               self->getBoundary(a0);
        // return type: RPolyline
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPasteOperation.getBoundary().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPasteOperation::getBoundary", context, engine);
            return result;
        }
         QScriptValue REcmaPasteOperation::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RPasteOperation* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RPasteOperation(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaPasteOperation::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RPasteOperation* self = getSelf("RPasteOperation", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RPasteOperation* REcmaPasteOperation::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RPasteOperation* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RPasteOperation >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RPasteOperation.%1(): "
                        "This object is not a RPasteOperation").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RPasteOperation* REcmaPasteOperation::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RPasteOperation* selfBase = getSelf(fName, context);
                RPasteOperation* self = dynamic_cast<RPasteOperation*>(selfBase);
                //return REcmaHelper::scriptValueTo<RPasteOperation >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RPasteOperation.%1(): "
                    "This object is not a RPasteOperation").arg(fName),
                    context);
            }

            return self;
            


        }
        