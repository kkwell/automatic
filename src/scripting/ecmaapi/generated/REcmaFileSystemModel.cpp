// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaFileSystemModel.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaFileSystemModel::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RFileSystemModel*) 0)));
        protoCreated = true;
    }

    
        // primary base class QFileSystemModel:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<QFileSystemModel*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class QFileSystemModel
        REcmaHelper::registerFunction(&engine, proto, getQFileSystemModel, "getQFileSystemModel");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, setRootPath, "setRootPath");
            
            REcmaHelper::registerFunction(&engine, proto, rootPath, "rootPath");
            
            REcmaHelper::registerFunction(&engine, proto, pathIndex, "pathIndex");
            
            REcmaHelper::registerFunction(&engine, proto, index, "index");
            
            REcmaHelper::registerFunction(&engine, proto, filePath, "filePath");
            
            REcmaHelper::registerFunction(&engine, proto, setFilter, "setFilter");
            
            REcmaHelper::registerFunction(&engine, proto, isDir, "isDir");
            
            REcmaHelper::registerFunction(&engine, proto, setHeaderData, "setHeaderData");
            
            REcmaHelper::registerFunction(&engine, proto, rowCount, "rowCount");
            
            REcmaHelper::registerFunction(&engine, proto, setIconProvider, "setIconProvider");
            
            REcmaHelper::registerFunction(&engine, proto, setNameFilter, "setNameFilter");
            
            REcmaHelper::registerFunction(&engine, proto, setNameFilters, "setNameFilters");
            
            REcmaHelper::registerFunction(&engine, proto, setNameFilterDisables, "setNameFilterDisables");
            
            REcmaHelper::registerFunction(&engine, proto, setItemData, "setItemData");
            
            REcmaHelper::registerFunction(&engine, proto, itemData, "itemData");
            
            REcmaHelper::registerFunction(&engine, proto, canFetchMore, "canFetchMore");
            
            REcmaHelper::registerFunction(&engine, proto, fetchMore, "fetchMore");
            
            REcmaHelper::registerFunction(&engine, proto, data, "data");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RFileSystemModel*>(), *proto);

        
                        qScriptRegisterMetaType<
                        RFileSystemModel*>(
                        &engine, toScriptValue, fromScriptValue, *proto);
                    
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RFileSystemModel",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaFileSystemModel::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RFileSystemModel(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RFileSystemModel
                    * cppResult =
                    new
                    RFileSystemModel
                    ();
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isQObject()
                ) /* type: QObject * */
            
    ){
    // prepare arguments:
    
            // argument isQObject
            QObject *
            a0 =
            qobject_cast<
            QObject *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RFileSystemModel
                    * cppResult =
                    new
                    RFileSystemModel
                    (
                    a0
                    );
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RFileSystemModel(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaFileSystemModel::getQFileSystemModel(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                QFileSystemModel* cppResult =
                    qscriptvalue_cast<RFileSystemModel*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaFileSystemModel::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RFileSystemModel"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaFileSystemModel::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("QFileSystemModel");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaFileSystemModel::setRootPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::setRootPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::setRootPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("setRootPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QModelIndex'
    QModelIndex cppResult =
        
               self->setRootPath(a0);
        // return type: QModelIndex
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.setRootPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::setRootPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::rootPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::rootPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::rootPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("rootPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->rootPath();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.rootPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::rootPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::pathIndex
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::pathIndex", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::pathIndex";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("pathIndex", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QModelIndex'
    QModelIndex cppResult =
        
               self->pathIndex(a0);
        // return type: QModelIndex
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QModelIndex'
    QModelIndex cppResult =
        
               self->pathIndex(a0
        ,
    a1);
        // return type: QModelIndex
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.pathIndex().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::pathIndex", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::index
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::index", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::index";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("index", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QModelIndex'
    QModelIndex cppResult =
        
               self->index(a0
        ,
    a1);
        // return type: QModelIndex
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNull()
        ) /* type: QModelIndex */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument is reference
                    QModelIndex*
                    ap2 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        2
                        )
                    );
                    if( ap2 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 2 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a2 = *ap2;
                
    // end of arguments

    // call C++ function:
    // return type 'QModelIndex'
    QModelIndex cppResult =
        
               self->index(a0
        ,
    a1
        ,
    a2);
        // return type: QModelIndex
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.index().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::index", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::filePath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::filePath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::filePath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("filePath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->filePath(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.filePath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::filePath", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::setFilter
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::setFilter", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::setFilter";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("setFilter", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QDir::Filters */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QDir::Filters*
                    ap0 =
                    qscriptvalue_cast<
                    QDir::Filters*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QDir::Filters*.",
                               context);                    
                    }
                    QDir::Filters& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFilter(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.setFilter().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::setFilter", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::isDir
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::isDir", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::isDir";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("isDir", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isDir(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.isDir().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::isDir", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::setHeaderData
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::setHeaderData", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::setHeaderData";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("setHeaderData", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: Qt::Orientation */
     && (
            context->argument(2).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    Qt::Orientation
                    a1 =
                    (Qt::Orientation)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    QString
                    a2 =
                    (QString)
                    
                    context->argument( 2 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setHeaderData(a0
        ,
    a1
        ,
    a2);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: Qt::Orientation */
     && (
            context->argument(2).isString()
        ) /* type: QString */
     && (
            context->argument(3).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    Qt::Orientation
                    a1 =
                    (Qt::Orientation)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    QString
                    a2 =
                    (QString)
                    
                    context->argument( 2 ).
                    toString();
                
                    // argument isStandardType
                    int
                    a3 =
                    (int)
                    
                    context->argument( 3 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setHeaderData(a0
        ,
    a1
        ,
    a2
        ,
    a3);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: Qt::Orientation */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNumber() || 
            context->argument(2).isString() || 
            context->argument(2).isBool() || 
            context->argument(2).isArray() || 
            context->argument(2).isNull() || 
            context->argument(2).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    Qt::Orientation
                    a1 =
                    (Qt::Orientation)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isCopyable or pointer
                    QVariant
                    a2 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        2
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setHeaderData(a0
        ,
    a1
        ,
    a2);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: Qt::Orientation */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNumber() || 
            context->argument(2).isString() || 
            context->argument(2).isBool() || 
            context->argument(2).isArray() || 
            context->argument(2).isNull() || 
            context->argument(2).isUndefined()
        ) /* type: QVariant */
     && (
            context->argument(3).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    Qt::Orientation
                    a1 =
                    (Qt::Orientation)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isCopyable or pointer
                    QVariant
                    a2 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        2
                        )
                    );
                
                    // argument isStandardType
                    int
                    a3 =
                    (int)
                    
                    context->argument( 3 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setHeaderData(a0
        ,
    a1
        ,
    a2
        ,
    a3);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.setHeaderData().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::setHeaderData", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::rowCount
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::rowCount", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::rowCount";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("rowCount", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->rowCount();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->rowCount(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.rowCount().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::rowCount", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::setIconProvider
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::setIconProvider", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::setIconProvider";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("setIconProvider", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QFileIconProvider * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QFileIconProvider * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QFileIconProvider >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QFileIconProvider *QFileIconProvider *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setIconProvider(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.setIconProvider().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::setIconProvider", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::setNameFilter
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::setNameFilter", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::setNameFilter";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("setNameFilter", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNameFilter(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.setNameFilter().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::setNameFilter", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::setNameFilters
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::setNameFilters", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::setNameFilters";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("setNameFilters", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QStringList */
    
    ){
    // prepare arguments:
    
                    // argument isArray or QVariantMap
                    QStringList
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNameFilters(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.setNameFilters().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::setNameFilters", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::setNameFilterDisables
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::setNameFilterDisables", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::setNameFilterDisables";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("setNameFilterDisables", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNameFilterDisables(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.setNameFilterDisables().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::setNameFilterDisables", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::setItemData
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::setItemData", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::setItemData";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("setItemData", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QMap < int , QVariant > */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
                    // argument is reference
                    QMap < int , QVariant >*
                    ap1 =
                    qscriptvalue_cast<
                    QMap < int , QVariant >*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 1 is not of type QMap < int , QVariant >*.",
                               context);                    
                    }
                    QMap < int , QVariant >& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setItemData(a0
        ,
    a1);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
     && (
            context->argument(1).isNumber()
        ) /* type: Qt::ItemDataRole */
     && (
            context->argument(2).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
                    // argument isStandardType
                    Qt::ItemDataRole
                    a1 =
                    (Qt::ItemDataRole)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    QString
                    a2 =
                    (QString)
                    
                    context->argument( 2 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setItemData(a0
        ,
    a1
        ,
    a2);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
     && (
            context->argument(1).isNumber()
        ) /* type: Qt::ItemDataRole */
     && (
            context->argument(2).isVariant()
        ) /* type: QColor */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
                    // argument isStandardType
                    Qt::ItemDataRole
                    a1 =
                    (Qt::ItemDataRole)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    QColor*
                    ap2 =
                    qscriptvalue_cast<
                    QColor*
                        >(
                        context->argument(
                        2
                        )
                    );
                    if (ap2 == NULL) {
                           return REcmaHelper::throwError("RFileSystemModel: Argument 2 is not of type QColor.",
                               context);                    
                    }
                    QColor 
                    a2 = 
                    *ap2;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setItemData(a0
        ,
    a1
        ,
    a2);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.setItemData().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::setItemData", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::itemData
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::itemData", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::itemData";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("itemData", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QMap < int , QVariant >'
    QMap < int , QVariant > cppResult =
        
               self->itemData(a0);
        // return type: QMap < int , QVariant >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.itemData().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::itemData", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::canFetchMore
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::canFetchMore", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::canFetchMore";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("canFetchMore", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->canFetchMore(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.canFetchMore().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::canFetchMore", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::fetchMore
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::fetchMore", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::fetchMore";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("fetchMore", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->fetchMore(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.fetchMore().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::fetchMore", context, engine);
            return result;
        }
         QScriptValue
        REcmaFileSystemModel::data
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaFileSystemModel::data", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaFileSystemModel::data";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RFileSystemModel* self = 
                        getSelf("data", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QVariant'
    QVariant cppResult =
        
               self->data(a0);
        // return type: QVariant
                // QVariant:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RFileSystemModel: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QVariant'
    QVariant cppResult =
        
               self->data(a0
        ,
    a1);
        // return type: QVariant
                // QVariant:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RFileSystemModel.data().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaFileSystemModel::data", context, engine);
            return result;
        }
         QScriptValue REcmaFileSystemModel::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RFileSystemModel* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RFileSystemModel(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaFileSystemModel::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RFileSystemModel* self = getSelf("RFileSystemModel", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RFileSystemModel* REcmaFileSystemModel::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RFileSystemModel* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RFileSystemModel >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RFileSystemModel.%1(): "
                        "This object is not a RFileSystemModel").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RFileSystemModel* REcmaFileSystemModel::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RFileSystemModel* selfBase = getSelf(fName, context);
                RFileSystemModel* self = dynamic_cast<RFileSystemModel*>(selfBase);
                //return REcmaHelper::scriptValueTo<RFileSystemModel >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RFileSystemModel.%1(): "
                    "This object is not a RFileSystemModel").arg(fName),
                    context);
            }

            return self;
            


        }
         void fromScriptValue(const QScriptValue& value,
        RFileSystemModel*
        &out) {
            QObject* o = value.toQObject();
            out = qobject_cast<
            RFileSystemModel*>(o);
        }
     QScriptValue toScriptValue(QScriptEngine *engine,
        RFileSystemModel*
        const &in){
            QScriptValue s = engine->newQObject(in, QScriptEngine::QtOwnership,
            QScriptEngine::PreferExistingWrapperObject);
            /*
            if(s.isNull()){
               REcmaHelper::throwError("This object is null.", engine->currentContext());
            }
            */
            return s;
        }
    