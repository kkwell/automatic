// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaSnap.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RGraphicsView.h"
            
            
        // includes for base ecma wrapper classes
         void REcmaSnap::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RSnap*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, snap, "snap");
            
            REcmaHelper::registerFunction(&engine, proto, showUiOptions, "showUiOptions");
            
            REcmaHelper::registerFunction(&engine, proto, hideUiOptions, "hideUiOptions");
            
            REcmaHelper::registerFunction(&engine, proto, suspendEvent, "suspendEvent");
            
            REcmaHelper::registerFunction(&engine, proto, finishEvent, "finishEvent");
            
            REcmaHelper::registerFunction(&engine, proto, getEntityIds, "getEntityIds");
            
            REcmaHelper::registerFunction(&engine, proto, getStatus, "getStatus");
            
            REcmaHelper::registerFunction(&engine, proto, setStatus, "setStatus");
            
            REcmaHelper::registerFunction(&engine, proto, getLastSnap, "getLastSnap");
            
            REcmaHelper::registerFunction(&engine, proto, reset, "reset");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RSnap*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    ctor.setProperty("Unknown",
    QScriptValue(RSnap::Unknown),
    QScriptValue::ReadOnly);


    ctor.setProperty("Free",
    QScriptValue(RSnap::Free),
    QScriptValue::ReadOnly);


    ctor.setProperty("Grid",
    QScriptValue(RSnap::Grid),
    QScriptValue::ReadOnly);


    ctor.setProperty("Endpoint",
    QScriptValue(RSnap::Endpoint),
    QScriptValue::ReadOnly);


    ctor.setProperty("OnEntity",
    QScriptValue(RSnap::OnEntity),
    QScriptValue::ReadOnly);


    ctor.setProperty("Center",
    QScriptValue(RSnap::Center),
    QScriptValue::ReadOnly);


    ctor.setProperty("Middle",
    QScriptValue(RSnap::Middle),
    QScriptValue::ReadOnly);


    ctor.setProperty("Distance",
    QScriptValue(RSnap::Distance),
    QScriptValue::ReadOnly);


    ctor.setProperty("Intersection",
    QScriptValue(RSnap::Intersection),
    QScriptValue::ReadOnly);


    ctor.setProperty("IntersectionManual",
    QScriptValue(RSnap::IntersectionManual),
    QScriptValue::ReadOnly);


    ctor.setProperty("Reference",
    QScriptValue(RSnap::Reference),
    QScriptValue::ReadOnly);


    ctor.setProperty("Perpendicular",
    QScriptValue(RSnap::Perpendicular),
    QScriptValue::ReadOnly);


    ctor.setProperty("Tangential",
    QScriptValue(RSnap::Tangential),
    QScriptValue::ReadOnly);


    ctor.setProperty("Coordinate",
    QScriptValue(RSnap::Coordinate),
    QScriptValue::ReadOnly);


    ctor.setProperty("CoordinatePolar",
    QScriptValue(RSnap::CoordinatePolar),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RSnap::Status>(
        &engine,
        toScriptValueEnumStatus,
        fromScriptValueEnumStatus,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RSnap",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaSnap::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RSnap(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            REcmaShellSnap
                    * cppResult =
                    new
                    REcmaShellSnap
                    ();
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
        cppResult->__qtscript_self = result;
    
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isNumber()
                ) /* type: RSnap::Status */
            
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RSnap::Status
                    a0 =
                    (RSnap::Status)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            REcmaShellSnap
                    * cppResult =
                    new
                    REcmaShellSnap
                    (
                    a0
                    );
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
        cppResult->__qtscript_self = result;
    
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RSnap(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaSnap::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RSnap"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaSnap::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaSnap::snap
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::snap", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::snap";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("snap", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RGraphicsView */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RSnap: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument is reference
                    RGraphicsView*
                    ap1 =
                    qscriptvalue_cast<
                    RGraphicsView*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RSnap: Argument 1 is not of type RGraphicsView*.",
                               context);                    
                    }
                    RGraphicsView& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->snap(a0
        ,
    a1);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RGraphicsView */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RSnap: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument is reference
                    RGraphicsView*
                    ap1 =
                    qscriptvalue_cast<
                    RGraphicsView*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RSnap: Argument 1 is not of type RGraphicsView*.",
                               context);                    
                    }
                    RGraphicsView& a1 = *ap1;
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->snap(a0
        ,
    a1
        ,
    a2);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.snap().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::snap", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnap::showUiOptions
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::showUiOptions", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::showUiOptions";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("showUiOptions", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->showUiOptions();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.showUiOptions().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::showUiOptions", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnap::hideUiOptions
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::hideUiOptions", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::hideUiOptions";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("hideUiOptions", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->hideUiOptions();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.hideUiOptions().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::hideUiOptions", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnap::suspendEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::suspendEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::suspendEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("suspendEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->suspendEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.suspendEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::suspendEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnap::finishEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::finishEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::finishEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("finishEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->finishEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.finishEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::finishEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnap::getEntityIds
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::getEntityIds", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::getEntityIds";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("getEntityIds", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < REntity::Id >'
    QList < REntity::Id > cppResult =
        
               self->getEntityIds();
        // return type: QList < REntity::Id >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.getEntityIds().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::getEntityIds", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnap::getStatus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::getStatus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::getStatus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("getStatus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RSnap::Status'
    RSnap::Status cppResult =
        
               self->getStatus();
        // return type: RSnap::Status
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.getStatus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::getStatus", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnap::setStatus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::setStatus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::setStatus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("setStatus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RSnap::Status */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RSnap::Status
                    a0 =
                    (RSnap::Status)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setStatus(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.setStatus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::setStatus", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnap::getLastSnap
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::getLastSnap", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::getLastSnap";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("getLastSnap", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getLastSnap();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.getLastSnap().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::getLastSnap", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnap::reset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnap::reset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnap::reset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnap* self = 
                        getSelf("reset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->reset();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnap.reset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnap::reset", context, engine);
            return result;
        }
         QScriptValue REcmaSnap::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RSnap* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RSnap(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaSnap::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RSnap* self = getSelf("RSnap", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RSnap* REcmaSnap::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RSnap* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RSnap >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RSnap.%1(): "
                        "This object is not a RSnap").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        REcmaShellSnap* REcmaSnap::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RSnap* selfBase = getSelf(fName, context);
                REcmaShellSnap* self = dynamic_cast<REcmaShellSnap*>(selfBase);
                //return REcmaHelper::scriptValueTo<REcmaShellSnap >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RSnap.%1(): "
                    "This object is not a RSnap").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaSnap::toScriptValueEnumStatus(QScriptEngine* engine, const RSnap::Status& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaSnap::fromScriptValueEnumStatus(const QScriptValue& value, RSnap::Status& out)
    
        {
            out = qvariant_cast<RSnap::Status>(value.toVariant());
        }
        