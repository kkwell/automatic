// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #ifndef RECMASNAPAUTO_H
        #define RECMASNAPAUTO_H

        #include "ecmaapi_global.h"

        #include <QScriptEngine>
        #include <QScriptValue>
        #include <QScriptContextInfo>
        #include <QDebug>

        
                #include "RSnapAuto.h"
            

        /**
         * \ingroup scripting_ecmaapi
         */
        class
        
        QCADECMAAPI_EXPORT
        REcmaSnapAuto {

        public:
      static  void initEcma(QScriptEngine& engine, QScriptValue* proto 
    =NULL
    ) 
    ;static  QScriptValue createEcma(QScriptContext* context, QScriptEngine* engine) 
    ;

    // conversion functions for base classes:
    static  QScriptValue getRSnap(QScriptContext *context,
            QScriptEngine *engine)
        ;

    // returns class name:
    static  QScriptValue getClassName(QScriptContext *context, QScriptEngine *engine) 
        ;

    // returns all base classes (in case of multiple inheritance):
    static  QScriptValue getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        ;

    // properties:
    

    // public methods:
    static  QScriptValue
        snap
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        init
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getModes
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setModes
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setMode
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getMode
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setIntersections
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getIntersections
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setEndPoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getEndPoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setMiddlePoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getMiddlePoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setCenterPoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getCenterPoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setPerpendicular
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getPerpendicular
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setTangential
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getTangential
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setReferencePoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getReferencePoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setGridPoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getGridPoints
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setPointsOnEntity
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getPointsOnEntity
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setFreePositioning
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getFreePositioning
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        reset
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue toString
    (QScriptContext *context, QScriptEngine *engine)
    ;static  QScriptValue destroy(QScriptContext *context, QScriptEngine *engine)
    ;static RSnapAuto* getSelf(const QString& fName, QScriptContext* context)
    ;static RSnapAuto* getSelfShell(const QString& fName, QScriptContext* context)
    ;static  QScriptValue toScriptValueEnumMode(QScriptEngine* engine, const RSnapAuto::Mode& value)
    ;static  void fromScriptValueEnumMode(const QScriptValue& value, RSnapAuto::Mode& out)
    ;};
    #endif
    