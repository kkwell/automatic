// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaSnapAuto.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RMouseEvent.h"
            
                #include "RGraphicsView.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaSnap.h"
                 void REcmaSnapAuto::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RSnapAuto*) 0)));
        protoCreated = true;
    }

    
        // primary base class RSnap:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<RSnap*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class RSnap
        REcmaHelper::registerFunction(&engine, proto, getRSnap, "getRSnap");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, snap, "snap");
            
            REcmaHelper::registerFunction(&engine, proto, reset, "reset");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RSnapAuto*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, init, "init");
            
            REcmaHelper::registerFunction(&engine, &ctor, getModes, "getModes");
            
            REcmaHelper::registerFunction(&engine, &ctor, setModes, "setModes");
            
            REcmaHelper::registerFunction(&engine, &ctor, setMode, "setMode");
            
            REcmaHelper::registerFunction(&engine, &ctor, getMode, "getMode");
            
            REcmaHelper::registerFunction(&engine, &ctor, setIntersections, "setIntersections");
            
            REcmaHelper::registerFunction(&engine, &ctor, getIntersections, "getIntersections");
            
            REcmaHelper::registerFunction(&engine, &ctor, setEndPoints, "setEndPoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, getEndPoints, "getEndPoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, setMiddlePoints, "setMiddlePoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, getMiddlePoints, "getMiddlePoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, setCenterPoints, "setCenterPoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, getCenterPoints, "getCenterPoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, setPerpendicular, "setPerpendicular");
            
            REcmaHelper::registerFunction(&engine, &ctor, getPerpendicular, "getPerpendicular");
            
            REcmaHelper::registerFunction(&engine, &ctor, setTangential, "setTangential");
            
            REcmaHelper::registerFunction(&engine, &ctor, getTangential, "getTangential");
            
            REcmaHelper::registerFunction(&engine, &ctor, setReferencePoints, "setReferencePoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, getReferencePoints, "getReferencePoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, setGridPoints, "setGridPoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, getGridPoints, "getGridPoints");
            
            REcmaHelper::registerFunction(&engine, &ctor, setPointsOnEntity, "setPointsOnEntity");
            
            REcmaHelper::registerFunction(&engine, &ctor, getPointsOnEntity, "getPointsOnEntity");
            
            REcmaHelper::registerFunction(&engine, &ctor, setFreePositioning, "setFreePositioning");
            
            REcmaHelper::registerFunction(&engine, &ctor, getFreePositioning, "getFreePositioning");
            

    // static properties:
    

    // enum values:
    

    ctor.setProperty("None",
    QScriptValue(RSnapAuto::None),
    QScriptValue::ReadOnly);


    ctor.setProperty("Intersections",
    QScriptValue(RSnapAuto::Intersections),
    QScriptValue::ReadOnly);


    ctor.setProperty("EndPoints",
    QScriptValue(RSnapAuto::EndPoints),
    QScriptValue::ReadOnly);


    ctor.setProperty("MiddlePoints",
    QScriptValue(RSnapAuto::MiddlePoints),
    QScriptValue::ReadOnly);


    ctor.setProperty("CenterPoints",
    QScriptValue(RSnapAuto::CenterPoints),
    QScriptValue::ReadOnly);


    ctor.setProperty("Perpendicular",
    QScriptValue(RSnapAuto::Perpendicular),
    QScriptValue::ReadOnly);


    ctor.setProperty("Tangential",
    QScriptValue(RSnapAuto::Tangential),
    QScriptValue::ReadOnly);


    ctor.setProperty("ReferencePoints",
    QScriptValue(RSnapAuto::ReferencePoints),
    QScriptValue::ReadOnly);


    ctor.setProperty("GridPoints",
    QScriptValue(RSnapAuto::GridPoints),
    QScriptValue::ReadOnly);


    ctor.setProperty("PointsOnEntity",
    QScriptValue(RSnapAuto::PointsOnEntity),
    QScriptValue::ReadOnly);


    ctor.setProperty("FreePositioning",
    QScriptValue(RSnapAuto::FreePositioning),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RSnapAuto::Mode>(
        &engine,
        toScriptValueEnumMode,
        fromScriptValueEnumMode,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RSnapAuto",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaSnapAuto::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RSnapAuto(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RSnapAuto
                    * cppResult =
                    new
                    RSnapAuto
                    ();
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RSnapAuto(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaSnapAuto::getRSnap(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RSnap* cppResult =
                    qscriptvalue_cast<RSnapAuto*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaSnapAuto::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RSnapAuto"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaSnapAuto::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("RSnap");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaSnapAuto::snap
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::snap", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::snap";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnapAuto* self = 
                        getSelf("snap", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RGraphicsView */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RSnapAuto: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument is reference
                    RGraphicsView*
                    ap1 =
                    qscriptvalue_cast<
                    RGraphicsView*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RSnapAuto: Argument 1 is not of type RGraphicsView*.",
                               context);                    
                    }
                    RGraphicsView& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->snap(a0
        ,
    a1);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RGraphicsView */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RSnapAuto: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument is reference
                    RGraphicsView*
                    ap1 =
                    qscriptvalue_cast<
                    RGraphicsView*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RSnapAuto: Argument 1 is not of type RGraphicsView*.",
                               context);                    
                    }
                    RGraphicsView& a1 = *ap1;
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->snap(a0
        ,
    a1
        ,
    a2);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.snap().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::snap", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::init
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::init", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::init";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       init();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       init(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.init().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::init", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getModes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getModes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getModes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RSnapAuto::Modes'
    RSnapAuto::Modes cppResult =
        RSnapAuto::
       getModes();
        // return type: RSnapAuto::Modes
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getModes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getModes", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setModes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setModes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setModes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RSnapAuto::Modes */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RSnapAuto::Modes
                    a0 =
                    (RSnapAuto::Modes)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setModes(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setModes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setModes", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSnapAuto::Mode */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RSnapAuto::Mode*
                    ap0 =
                    qscriptvalue_cast<
                    RSnapAuto::Mode*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RSnapAuto: Argument 0 is not of type RSnapAuto::Mode*.",
                               context);                    
                    }
                    RSnapAuto::Mode& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setMode(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSnapAuto::Mode */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RSnapAuto::Mode*
                    ap0 =
                    qscriptvalue_cast<
                    RSnapAuto::Mode*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RSnapAuto: Argument 0 is not of type RSnapAuto::Mode*.",
                               context);                    
                    }
                    RSnapAuto::Mode& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getMode(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setIntersections
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setIntersections", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setIntersections";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setIntersections(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setIntersections().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setIntersections", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getIntersections
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getIntersections", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getIntersections";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getIntersections();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getIntersections().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getIntersections", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setEndPoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setEndPoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setEndPoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setEndPoints(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setEndPoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setEndPoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getEndPoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getEndPoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getEndPoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getEndPoints();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getEndPoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getEndPoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setMiddlePoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setMiddlePoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setMiddlePoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setMiddlePoints(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setMiddlePoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setMiddlePoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getMiddlePoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getMiddlePoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getMiddlePoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getMiddlePoints();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getMiddlePoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getMiddlePoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setCenterPoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setCenterPoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setCenterPoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setCenterPoints(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setCenterPoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setCenterPoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getCenterPoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getCenterPoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getCenterPoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getCenterPoints();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getCenterPoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getCenterPoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setPerpendicular
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setPerpendicular", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setPerpendicular";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setPerpendicular(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setPerpendicular().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setPerpendicular", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getPerpendicular
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getPerpendicular", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getPerpendicular";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getPerpendicular();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getPerpendicular().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getPerpendicular", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setTangential
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setTangential", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setTangential";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setTangential(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setTangential().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setTangential", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getTangential
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getTangential", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getTangential";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getTangential();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getTangential().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getTangential", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setReferencePoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setReferencePoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setReferencePoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setReferencePoints(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setReferencePoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setReferencePoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getReferencePoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getReferencePoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getReferencePoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getReferencePoints();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getReferencePoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getReferencePoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setGridPoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setGridPoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setGridPoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setGridPoints(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setGridPoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setGridPoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getGridPoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getGridPoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getGridPoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getGridPoints();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getGridPoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getGridPoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setPointsOnEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setPointsOnEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setPointsOnEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setPointsOnEntity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setPointsOnEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setPointsOnEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getPointsOnEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getPointsOnEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getPointsOnEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getPointsOnEntity();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getPointsOnEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getPointsOnEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::setFreePositioning
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::setFreePositioning", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::setFreePositioning";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSnapAuto::
       setFreePositioning(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.setFreePositioning().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::setFreePositioning", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::getFreePositioning
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::getFreePositioning", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::getFreePositioning";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSnapAuto::
       getFreePositioning();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.getFreePositioning().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::getFreePositioning", context, engine);
            return result;
        }
         QScriptValue
        REcmaSnapAuto::reset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSnapAuto::reset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSnapAuto::reset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RSnapAuto* self = 
                        getSelf("reset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->reset();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSnapAuto.reset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSnapAuto::reset", context, engine);
            return result;
        }
         QScriptValue REcmaSnapAuto::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RSnapAuto* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RSnapAuto(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaSnapAuto::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RSnapAuto* self = getSelf("RSnapAuto", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RSnapAuto* REcmaSnapAuto::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RSnapAuto* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RSnapAuto >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RSnapAuto.%1(): "
                        "This object is not a RSnapAuto").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RSnapAuto* REcmaSnapAuto::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RSnapAuto* selfBase = getSelf(fName, context);
                RSnapAuto* self = dynamic_cast<RSnapAuto*>(selfBase);
                //return REcmaHelper::scriptValueTo<RSnapAuto >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RSnapAuto.%1(): "
                    "This object is not a RSnapAuto").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaSnapAuto::toScriptValueEnumMode(QScriptEngine* engine, const RSnapAuto::Mode& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaSnapAuto::fromScriptValueEnumMode(const QScriptValue& value, RSnapAuto::Mode& out)
    
        {
            out = qvariant_cast<RSnapAuto::Mode>(value.toVariant());
        }
        