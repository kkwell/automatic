// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaDimStyleData.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaDimStyleData::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RDimStyleData*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, initFromSettings, "initFromSettings");
            
            REcmaHelper::registerFunction(&engine, proto, hasOverride, "hasOverride");
            
            REcmaHelper::registerFunction(&engine, proto, isValid, "isValid");
            
            REcmaHelper::registerFunction(&engine, proto, clear, "clear");
            
            REcmaHelper::registerFunction(&engine, proto, getVariant, "getVariant");
            
            REcmaHelper::registerFunction(&engine, proto, setVariant, "setVariant");
            
            REcmaHelper::registerFunction(&engine, proto, getDouble, "getDouble");
            
            REcmaHelper::registerFunction(&engine, proto, setDouble, "setDouble");
            
            REcmaHelper::registerFunction(&engine, proto, removeDouble, "removeDouble");
            
            REcmaHelper::registerFunction(&engine, proto, getInt, "getInt");
            
            REcmaHelper::registerFunction(&engine, proto, setInt, "setInt");
            
            REcmaHelper::registerFunction(&engine, proto, removeInt, "removeInt");
            
            REcmaHelper::registerFunction(&engine, proto, getBool, "getBool");
            
            REcmaHelper::registerFunction(&engine, proto, setBool, "setBool");
            
            REcmaHelper::registerFunction(&engine, proto, removeBool, "removeBool");
            
            REcmaHelper::registerFunction(&engine, proto, getColor, "getColor");
            
            REcmaHelper::registerFunction(&engine, proto, setColor, "setColor");
            
            REcmaHelper::registerFunction(&engine, proto, removeColor, "removeColor");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RDimStyleData*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RDimStyleData
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, init, "init");
            
            REcmaHelper::registerFunction(&engine, &ctor, initDefaults, "initDefaults");
            
            REcmaHelper::registerFunction(&engine, &ctor, getVariantDefault, "getVariantDefault");
            
            REcmaHelper::registerFunction(&engine, &ctor, getDoubleDefault, "getDoubleDefault");
            
            REcmaHelper::registerFunction(&engine, &ctor, getIntDefault, "getIntDefault");
            
            REcmaHelper::registerFunction(&engine, &ctor, getBoolDefault, "getBoolDefault");
            
            REcmaHelper::registerFunction(&engine, &ctor, getColorDefault, "getColorDefault");
            
            REcmaHelper::registerFunction(&engine, &ctor, getVariableType, "getVariableType");
            

    // static properties:
    
            ctor.setProperty("dimXTypes",
                qScriptValueFromValue(&engine, RDimStyleData::dimXTypes),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RDimStyleData",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaDimStyleData::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RDimStyleData(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RDimStyleData
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isBool()
                ) /* type: bool */
            
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RDimStyleData
                    cppResult(
                    a0
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RDimStyleData(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaDimStyleData::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RDimStyleData"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaDimStyleData::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaDimStyleData::init
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::init", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::init";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RDimStyleData::
       init();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.init().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::init", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::initDefaults
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::initDefaults", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::initDefaults";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RDimStyleData::
       initDefaults();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.initDefaults().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::initDefaults", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getVariantDefault
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getVariantDefault", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getVariantDefault";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QVariant'
    QVariant cppResult =
        RDimStyleData::
       getVariantDefault(a0);
        // return type: QVariant
                // QVariant:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getVariantDefault().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getVariantDefault", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getDoubleDefault
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getDoubleDefault", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getDoubleDefault";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        RDimStyleData::
       getDoubleDefault(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getDoubleDefault().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getDoubleDefault", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getIntDefault
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getIntDefault", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getIntDefault";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RDimStyleData::
       getIntDefault(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getIntDefault().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getIntDefault", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getBoolDefault
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getBoolDefault", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getBoolDefault";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RDimStyleData::
       getBoolDefault(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getBoolDefault().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getBoolDefault", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getColorDefault
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getColorDefault", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getColorDefault";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RColor'
    RColor cppResult =
        RDimStyleData::
       getColorDefault(a0);
        // return type: RColor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getColorDefault().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getColorDefault", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::initFromSettings
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::initFromSettings", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::initFromSettings";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("initFromSettings", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->initFromSettings();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.initFromSettings().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::initFromSettings", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::hasOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::hasOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::hasOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("hasOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasOverride(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.hasOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::hasOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::isValid
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::isValid", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::isValid";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("isValid", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isValid();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.isValid().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::isValid", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::clear
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::clear", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::clear";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("clear", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clear();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.clear().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::clear", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getVariableType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getVariableType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getVariableType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RS::KnownVariableType'
    RS::KnownVariableType cppResult =
        RDimStyleData::
       getVariableType(a0);
        // return type: RS::KnownVariableType
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getVariableType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getVariableType", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getVariant
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getVariant", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getVariant";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("getVariant", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QVariant'
    QVariant cppResult =
        
               self->getVariant(a0);
        // return type: QVariant
                // QVariant:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getVariant().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getVariant", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::setVariant
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::setVariant", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::setVariant";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("setVariant", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setVariant(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.setVariant().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::setVariant", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getDouble
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getDouble", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getDouble";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("getDouble", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getDouble(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getDouble().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getDouble", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::setDouble
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::setDouble", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::setDouble";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("setDouble", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDouble(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.setDouble().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::setDouble", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::removeDouble
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::removeDouble", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::removeDouble";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("removeDouble", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeDouble(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.removeDouble().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::removeDouble", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getInt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getInt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getInt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("getInt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getInt(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getInt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getInt", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::setInt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::setInt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::setInt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("setInt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setInt(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.setInt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::setInt", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::removeInt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::removeInt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::removeInt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("removeInt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeInt(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.removeInt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::removeInt", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getBool
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getBool", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getBool";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("getBool", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getBool(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getBool().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getBool", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::setBool
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::setBool", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::setBool";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("setBool", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBool(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.setBool().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::setBool", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::removeBool
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::removeBool", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::removeBool";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("removeBool", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeBool(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.removeBool().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::removeBool", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::getColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::getColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::getColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("getColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RColor'
    RColor cppResult =
        
               self->getColor(a0);
        // return type: RColor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.getColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::getColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::setColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::setColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::setColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("setColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RColor */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RColor*
                    ap1 =
                    qscriptvalue_cast<
                    RColor*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RDimStyleData: Argument 1 is not of type RColor.",
                               context);                    
                    }
                    RColor 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setColor(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.setColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::setColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaDimStyleData::removeColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDimStyleData::removeColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDimStyleData::removeColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDimStyleData* self = 
                        getSelf("removeColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeColor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDimStyleData.removeColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDimStyleData::removeColor", context, engine);
            return result;
        }
         QScriptValue REcmaDimStyleData::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RDimStyleData* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RDimStyleData(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaDimStyleData::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RDimStyleData cp = qscriptvalue_cast<RDimStyleData>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaDimStyleData::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RDimStyleData* self = getSelf("RDimStyleData", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RDimStyleData* REcmaDimStyleData::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RDimStyleData* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RDimStyleData >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RDimStyleData.%1(): "
                        "This object is not a RDimStyleData").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RDimStyleData* REcmaDimStyleData::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RDimStyleData* selfBase = getSelf(fName, context);
                RDimStyleData* self = dynamic_cast<RDimStyleData*>(selfBase);
                //return REcmaHelper::scriptValueTo<RDimStyleData >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RDimStyleData.%1(): "
                    "This object is not a RDimStyleData").arg(fName),
                    context);
            }

            return self;
            


        }
        